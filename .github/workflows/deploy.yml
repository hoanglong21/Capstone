# name: Deploy to AWS Elastic Beanstalk
# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
      
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-west-1
#           aws-default-region: us-west-1
      
#       - name: Install EB command line interface
#         run: |
#           sudo apt-get update
#           sudo apt-get install python3-pip
#           sudo pip3 install awsebcli

#       - name: Create Elastic Beanstalk application version
#         run: |
#           cd springboot-backend
#           eb init -i capstoneProject --region us-west-1 -p "Java 20" -s "64bit Amazon Linux 2 v5.0.0 running Tomcat 9 Java 20"
#           eb create # Create an environment for your application
#           eb setenv CapstoneProject-env=production # Set the Spring profile for your application
#           eb deploy # Deploy your application to the environment

# name: Deployment
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           # distribution: 'adopt'
#           java-version: 17
#       - name: Build with Maven
#         run: mvn -B package -DskipTests --file springboot-backend/pom.xml
#       - name: Upload JAR
#         uses: actions/upload-artifact@v3
#         with:
#           name: artifact
#           path: springboot-backend/target/capstone-0.0.1-SNAPSHOT.jar
#   deploy:
#     needs: build
#     name: Deploy
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Download JAR
#         uses: actions/download-artifact@v3
#         with:
#           name: artifact
#       #Deploy the artifact (JAR) into AWS Beanstalk
#       - name: Deploy to EB
#         uses: einaregilsson/beanstalk-deploy@v15
#         with:
#           aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           application_name: longdh21part2
#           environment_name: Longdh21part2-env
#           version_label: ${{github.SHA}}
#           region: us-east-1
#           deployment_package: capstone-0.0.1-SNAPSHOT.jar
#           use_existing_version_if_available: true

name: Deploy to Elastic Beanstalk
on:
  push:
    branches:
      - main

name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  DOCKER_REPO: ghcr.io/${{ github.repository_owner }}
  APP_NAME: capstoneProject
  ENV_NAME: CapstoneProject-env

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to GitHub Packages
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        docker build -t $DOCKER_REPO:${{ github.sha }} ./springboot-backend
        docker push $DOCKER_REPO:${{ github.sha }}

    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v18
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: ${{ env.AWS_REGION }}
        application_name: ${{ env.APP_NAME }}
        environment_name: ${{ env.ENV_NAME }}
        version_label: ${{ github.sha }}
        deployment_package: ./springboot-backend/Dockerfile
        container_port: 8080
        no_waits: true
        extra_args: --docker-repo $DOCKER_REPO --timeout 30
